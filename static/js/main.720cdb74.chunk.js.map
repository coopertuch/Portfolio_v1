{"version":3,"sources":["App.js","components/Projects.js","serviceWorker.js","index.js"],"names":["App","className","to","href","target","rel","class","Component","Projects","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAqDeA,G,uLA1CX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAChB,6BACE,6BACE,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,cACxB,wBAAID,UAAU,SAAd,yCAGJ,yBAAKA,UAAU,SACb,uBACEA,UAAU,MACVE,KAAK,0CACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGC,MAAM,iCAEX,uBACEL,UAAU,MACVE,KAAK,gCACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGC,MAAM,+BAEX,uBACEL,UAAU,MACVE,KAAK,iCACLC,OAAO,SACPC,IAAI,uBAEJ,uBAAGC,MAAM,iC,GAlCPC,cCkIHC,G,uLAtIX,OACE,6BACE,yBAAKP,UAAU,WACb,8BACE,uBAAGA,UAAU,QACX,uBACEA,UAAU,UACVE,KAAK,qCACLC,OAAO,SACPC,IAAI,uBAJN,YAMY,KAPd,mpCA2Ba,IACX,uBACEJ,UAAU,OACVE,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAJN,QA5BF,OAwCJ,yBAAKJ,UAAU,WACb,8BACE,uBAAGA,UAAU,QACX,uBACEA,UAAU,UACVE,KAAK,uCACLC,OAAO,SACPC,IAAI,uBAJN,kBAMkB,KACb,IARP,ghCAyBa,IACX,uBACEJ,UAAU,OACVE,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAJN,QA1BF,OAsCJ,yBAAKJ,UAAU,WACb,8BACE,uBAAGA,UAAU,QACX,uBACEA,UAAU,UACVE,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAJN,iBAMiB,KACZ,IARP,ulCA0BkC,IAChC,uBACEJ,UAAU,OACVE,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAJN,QA3BF,qBAsCF,2BACEJ,UAAU,UACVQ,IAAI,qD,GAhIOF,cCSHG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.720cdb74.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\n// import { Route, Link, Switch, Redirect } from \"react-router-dom\";\n// import Home from \"./components/Home\";\n// import Projects from \"./components/Projects\";\n// import Blog from \"./components/Blog\";\n// import Music from \"./components/Music\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"header\">\n          <nav>\n            <div>\n              <Link className=\"link\" to=\"/Portfolio\">\n                <h1 className=\"title\"> Cooper Tuch // Frontend Developer </h1>\n              </Link>\n            </div>\n            <div className=\"links\">\n              <a\n                className=\"url\"\n                href=\"https://www.linkedin.com/in/coopertuch/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <i class=\"fa fa-linkedin-square fa-lg\"></i>\n              </a>\n              <a\n                className=\"url\"\n                href=\"https://github.com/coopertuch\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <i class=\"fa fa-github-square fa-lg\"></i>\n              </a>\n              <a\n                className=\"url\"\n                href=\"https://medium.com/@coopertuch\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <i class=\"fab fa-medium fa-lg\"></i>\n              </a>\n            </div>\n          </nav>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport \"./Projects.css\";\n\nclass Projects extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"project\">\n          <span>\n            <p className=\"body\">\n              <a\n                className=\"url box\"\n                href=\"https://we-work-out.herokuapp.com/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                WeWorkout{\" \"}\n              </a>\n              is an open forum for finding workouts, adding your own workouts,\n              and a database to track your weights, reps, sets, and progression,\n              built using HTML, CSS, Python, Django, PostgreSQL and Materialize.\n              There is full CRUD functionality for workouts and lifts, with\n              required user authentication. WeWorkout is deployed to Heroku, and\n              is responsive for desktop and mobile. On the Home/Workout page,\n              workouts are listed with the user's name and muscle group,\n              followed by form, breathing, and progression tips; users can add\n              workouts from this page using the + sign. Clicking into a workout\n              will then display all lifts associated with that user's muscle\n              group, with the exercise, desired reps, and weight; users can add\n              lifts from this page using the + sign, in addition to being able\n              to edit and delete both the workout and lift info from this page.\n              The Lifts page will display all lifts, where users can click on\n              lifts to view, edit, or delete. To add, edit, or delete workouts\n              and lifts, users must sign up and be logged in; users do not need\n              to be logged in to just view workouts and lifts. For more\n              information on the project with examples, check out the GitHub\n              repository{\" \"}\n              <a\n                className=\"repo\"\n                href=\"https://github.com/coopertuch/GA-Project-4\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                here\n              </a>\n              .\n            </p>\n          </span>\n        </div>\n        <div className=\"project\">\n          <span>\n            <p className=\"body\">\n              <a\n                className=\"url box\"\n                href=\"https://coopscheerups.herokuapp.com/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Coop's Cheerups{\" \"}\n              </a>{\" \"}\n              is a board of positive quotes, built using HTML, CSS, Javascript,\n              Express, Handlebars, and Mongoose. Coop's Cheerups is deployed to\n              Heroku, and is responsive for desktop and mobile. On load, all\n              Cheerups will be displayed in single rows, or rows of one to\n              three, responsive to your browser. Underneath the logo, there is a\n              \"New Cheerup\" button which directs users to a new page where they\n              can create their own cheerup; on this page, they will be required\n              to enter the quote and author, with a maximum of 100 and 20\n              characters for the quote and author, respectively. After\n              submitting a new cheerup, they will be redirected back to the home\n              page. Each cheerup has the option to edit or remove; the edit will\n              direct the user to a new page that has pulled the new cheerup and\n              allows users to edit the quote, author, and update likes. After\n              submitting an edit, they will be redirected back to the home page.\n              The remove button will instantly delete the quote. For more\n              information on the project with examples, check out the GitHub\n              repository{\" \"}\n              <a\n                className=\"repo\"\n                href=\"https://github.com/coopertuch/GA-Project-2\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                here\n              </a>\n              .\n            </p>\n          </span>\n        </div>\n        <div className=\"project\">\n          <span>\n            <p className=\"body\">\n              <a\n                className=\"url box\"\n                href=\"https://coopertuch.github.io/GA-Project-1/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                BB'z Questions{\" \"}\n              </a>{\" \"}\n              is a collection of questions split into several various\n              categories, built using HTML, CSS, and Javascript. This project is\n              intended for use by new friends, old friends, family, anyone you\n              hope to get closer to or have some fun with. So often we are\n              paralyzed by social interactions and overthinking that we don't\n              even begin to converse with each other, always resorting to small\n              talk; I've been doing well, the weather is good, so was my\n              weekend. While you may not want to get into personal details with\n              co-workers, this project offers a variety of (growing) categories\n              and questions to spark up conversations with each other; spend\n              some time debating whether savory or sweet is better, or maybe\n              come to the realization that you both love the same movies. For\n              those who seek to enrich or rebuild existing relationships with\n              friends or family, there are even more questions for you.\n              Sometimes all it takes is one question to start meaningful\n              conversations and open the door to connection. A huge thank you to\n              the Banana Boyz, or \"BB'z\" for short, for inspiring this app idea!\n              Check out the GitHub repository{\" \"}\n              <a\n                className=\"repo\"\n                href=\"https://github.com/coopertuch/GA-Project-1\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                here\n              </a>\n              , or play below!\n            </p>\n          </span>\n          <embed\n            className=\"website\"\n            src=\"https://coopertuch.github.io/GA-Project-1/\"\n          ></embed>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Projects;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport Projects from \"./components/Projects\";\n// import Blog from \"./components/Blog\";\n// import Music from \"./components/Music\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n    <Projects />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}